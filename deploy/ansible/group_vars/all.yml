local_user: "{{ lookup('env', 'USER') }}"

env: production

# This is used as the basis of a few other variables, eg. hostname, site_fqdn.
project_name: BostonDataVis.com

# This is what you'll see at the bash prompt if/when you ssh into your server.
hostname: "{{project_name}}"

# Git repo address. Modify as-needed.
git_repo: http://github.com/BostonDataVis/{{project_name}}.git

# Parent directory for cloned repository directories.
base_path: /mnt

# Where the production site symlink will exist. This value needs to be the
# same as the config.vm.synced_folder setting in the Vagrantfile.
site_path: "{{base_path}}/site"

# Temporary location where the git repo will be cloned and the build scripts
# will be run before going live.
clone_path: "{{base_path}}/temp"

# If this variable is defined, a file containing build information, including
# the timestamp, commit, sha, and a few other useful values will be generated
# after the build has completed. This file is relative to your project root.
build_info_path: "public/build.txt"

# The directory that nginx will serve as the production site. This is typically
# where your index.html file exists (or will exist after the build process).
public_path: "{{site_path}}/app/public"

# The server hostname and FQDN. These might need to change if you have a
# different server naming scheme or don't work at Bocoup ;)
hostname: "BostonDataVis.com"
site_fqdn: "BostonDataVis.com"

site_user: www-data
site_group: www-data
site_port: 8080
site_log_file: /var/log/site

#######
# USERS
#######

# Specified users will be added to the remote server, along with all specified
# public keys. Removing a user from this list does NOT remove them from the
# remote server! You need to set their state to "absent", remove all the other
# properties for that user, and re-run the "configure" playbook. Also, the
# shadow password (that user's sudo password) should be a hash, and NOT plain
# text!
#
# Generate a shadow password hash using the following command:
# openssl passwd -1 -salt $(openssl rand -base64 6) yourpassword
#
users:
  - name: ajpiano
    state: present
    real_name: adam j. sontag
    shadow_pass: $6$rounds=100000$gJ5dfCfjy3DlFJ7C$FXP0bL.By3gLq811ygKd1eRJRavvBOEATx34PbTxyI8y9st3x0v6XnmERZoQ0tJdliMW18/jzbSJYm9IZvzwE/
    public_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAu/7k6bSQ1EwLXyfZqM9tw7K/3WB4jIgIW2Jmb1rnGdqeJ7jX3ezAAPJEqoSwvGFZoTONC35OLnNvUwvfo/96Es/9q+qnZZMCnktAFamUlzdbyGudnMq7GkRqzdk9BhaaD5R5Pv0mVSvKMNxn3oVvdKmJpZK8NRpFkY0L3y2WcVp+KgH9ucdNN7bF9O9QZIGFhDEQBBwJYym7zwm9pERrZNoKN6NrLin+pCkZDohQMotxZmLySmCviaFFL9/HTm5GC+SoIr9s5CQFchHlrAWbDjnbpLnfz4dkFU1Ksg78c4saITgN7Zsn2EEI5ON/nJPLfoz1qRubrus4FHyX9QuGwQ== ajpiano@ajpiano.com
  - name: iros
    state: present
    real_name: irene ros
    shadow_pass: $1$2a0s6Vxl$a4sBNXOCvVfC5EHMBrAxv1
    public_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAvpY8nBn34xoinXrgPG/j9q369PJYMI16ldVO2lyJJqP/b3TFc3FEd1IjUGihOAbljNu/bniIb733eVQAKSyFROusz5IbG2fIuAUdstDRe40oDnpinBZXgnvd9dR9sztttJ5Y9WjzcJrLmzT7AccJat0m9tWFlLpJJiFuntTEAZSNUagqh2X2E6aVYuxCbELtHIO/ztZf1g1RpToKHHoiY855t5sAK1DnIZKkCKxQxxq5XHxn4cqoPIUKAMX+Pzu3vLj+cOaJuMtjfQBOEHKklQ7zXoOQ1uZ3brWCTAuyYaG7CWW3XaNGYwa8kUlta1C13N0ZfaQdSTIRtTXMM8tNFw== iros@mini-me

#############
# PROVISIONING
##############

# Keys to be added to apt.
apt_keys:
  - "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"

# Ppas to be added to apt. Useful ppas (replace trusty with your Ubuntu
# version codename, if necessary):
# Git latest:     ppa:git-core/ppa
# Node.js 0.10.x: deb https://deb.nodesource.com/node_0.10 trusty main
# Node.js 0.12.x: deb https://deb.nodesource.com/node_0.12 trusty main
# Io.js 1.x:      deb https://deb.nodesource.com/iojs_1.x trusty main
apt_ppas:
  - "ppa:git-core/ppa"
  - "deb https://deb.nodesource.com/node_0.12 trusty main"

# Any apt packages to install. Apt package versions may be specified like
# - git=2.1.0
apt_packages:
  - git
  - nodejs
  - nginx

############
# WEB SERVER
############

# Should the nginx server use HTTPS instead of HTTP?
ssl: false

# If ssl is enabled, these cert/key files will be used by nginx. You will need
# to ensure these files are valid and already on the server (which you can do
# via cloud-init, scp, etc).
ssl_cert_path: /etc/ssl/star.bocoup.com.cert
ssl_key_path: /etc/ssl/star.bocoup.com.key

# Use a custom parameter for stronger DHE key exchange.
dhe_param_path: /etc/ssl/certs/dhparam.pem

# Nginx dir and conf dir.
nginx_dir: /etc/nginx
conf_dir: "{{nginx_dir}}/conf.d"

# Nginx templated configuration files to create.
shared:
  - {file: ssl_params, directory: "{{nginx_dir}}"}
  - {file: gzip_params, directory: "{{nginx_dir}}"}
confs:
  - {file: site.conf, directory: "{{conf_dir}}"}
  - {file: ".htpasswd", directory: "{{nginx_dir}}"}

########
# DEPLOY
########

# If defined, only this many of the most recent clone directories (including the
# current specified commit) will be retained. Anything older will be removed,
# once the current clone has been made live.
keep_n_most_recent: 3


###################
# DEPLOY EXTRA VARS
###################

# Specify any ref (eg. branch, tag, SHA) to be deployed. This ref must be
# pushed to the remote git_repo.

# Note: git_sha will usually get passed in as an extra var coming from hookshot
commit: "{{git_commit_sha | default('master')}}"

# Specify any valid remote (typically a github user)
remote: bocoup

# Git repo address.
git_repo: git@github.com:{{remote}}/{{project_name}}.git

# Clone and build the specified commit SHA, regardless of prior build status.
force: false

# Use the local project Git repo instead of the remote git_repo. This option
# only works with the vagrant inventory, and not with staging or production.
local: false
